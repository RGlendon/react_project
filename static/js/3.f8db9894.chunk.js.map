{"version":3,"sources":["blocks/Dialogs/Dialogs.module.css","blocks/Dialogs/Dialog/Dialog.module.css","blocks/Dialogs/Message/Message.module.css","blocks/Dialogs/Dialog/Dialog.jsx","blocks/Dialogs/Message/Message.jsx","blocks/Dialogs/Dialogs.jsx","blocks/Dialogs/DialogsContainer.jsx"],"names":["module","exports","Dialog","props","className","s","dialog","image","src","alt","to","id","activeClassName","active","name","Message","message","maxLength300","maxLength","AddMessageForm","onSubmit","handleSubmit","Field","component","renderTextarea","validate","placeholder","reduxForm","form","Dialogs","dialogs","dialogsPage","map","key","messages","dialogItems","message_wrapper","formData","console","log","addMessage","messageText","compose","connect","state","dispatch","addMessageActionCreator","withAuthRedirect"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,gBAAkB,iCAAiC,SAAW,4B,oBCA9JD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,OAAS,yB,oBCAzFD,EAAOC,QAAU,CAAC,QAAU,2B,+GCgBbC,MAZf,SAAgBC,GAGZ,OACI,yBAAKC,UAAWC,IAAEC,QACd,yBAAKF,UAAWC,IAAEE,MAAOC,IAAKL,EAAMK,IAAKC,IAAI,QAC7C,kBAAC,IAAD,CAASC,GAAI,YAAcP,EAAMQ,GAAIC,gBAAiBP,IAAEQ,QAASV,EAAMW,Q,kBCEpEC,MATf,SAAiBZ,GACb,OACI,yBAAKC,UAAWC,IAAEW,SACbb,EAAMa,U,kCC8BnB,IAAMC,EAAeC,YAAU,IAE3BC,EAAiB,SAAAhB,GACjB,OACI,0BAAMiB,SAAUjB,EAAMkB,cAClB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAgBC,SAAU,CAACR,GAAeH,KAAK,cAAcY,YAAY,kBAC3F,iDAKZP,EAAiBQ,YAAU,CAACC,KAAM,cAAjBD,CAAgCR,GAElCU,MAvCf,SAAiB1B,GACb,IAAI2B,EAAU3B,EAAM4B,YAAYD,QAAQE,KAAI,gBAAErB,EAAF,EAAEA,GAAIG,EAAN,EAAMA,KAAMN,EAAZ,EAAYA,IAAZ,OAAqB,kBAAC,EAAD,CAAQG,GAAIA,EAAIG,KAAMA,EAAMN,IAAKA,EAAKyB,IAAKtB,OACxGuB,EAAW/B,EAAM4B,YAAYG,SAASF,KAAI,gBAAEhB,EAAF,EAAEA,QAASL,EAAX,EAAWA,GAAX,OAAmB,kBAAC,EAAD,CAASK,QAASA,EAASiB,IAAKtB,OASjG,OACI,yBAAKP,UAAWC,IAAEyB,SACd,yBAAK1B,UAAWC,IAAE8B,aACbL,GAEL,yBAAK1B,UAAWC,IAAE+B,iBACd,yBAAKhC,UAAWC,IAAE6B,UACbA,GAEL,kBAAC,EAAD,CAAgBd,SAhB5B,SAAoBiB,GAChBC,QAAQC,IAAIF,GACZlC,EAAMqC,WAAWH,EAASI,mB,uBCwBnBC,sBACXC,aAjBJ,SAAyBC,GACrB,MAAO,CACHb,YAAaa,EAAMb,gBAI3B,SAA4Bc,GACzB,MAAO,CACHL,WAAY,SAACC,GACTI,EAASC,YAAwBL,SASxCM,IAFWL,CAGbb","file":"static/js/3.f8db9894.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__le97f\",\"dialogItems\":\"Dialogs_dialogItems__3cmYP\",\"message_wrapper\":\"Dialogs_message_wrapper__3Ce1J\",\"messages\":\"Dialogs_messages__3QL6p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__1LLdY\",\"image\":\"Dialog_image__8Fick\",\"active\":\"Dialog_active__6sdDA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__Y-NLA\"};","import React from 'react';\r\nimport s from './Dialog.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nfunction Dialog(props) {\r\n\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img className={s.image} src={props.src} alt='img'/>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport s from './Message.module.css';\r\n\r\n\r\nfunction Message(props) {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {renderTextarea} from \"../common/ValidatorForms/ValidatorForms\";\r\nimport {maxLength} from \"../../utils/validators\";\r\n\r\n\r\n\r\nfunction Dialogs(props) {\r\n    let dialogs = props.dialogsPage.dialogs.map(({id, name, src}) => <Dialog id={id} name={name} src={src} key={id}/>);\r\n    let messages = props.dialogsPage.messages.map(({message, id}) => <Message message={message} key={id}/>);\r\n\r\n    function addMessage(formData) {\r\n        console.log(formData);\r\n        props.addMessage(formData.messageText);\r\n    }\r\n\r\n    // if (!props.isLogin) return <Redirect to='/login' />\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogs}\r\n            </div>\r\n            <div className={s.message_wrapper}>\r\n                <div className={s.messages}>\r\n                    {messages}\r\n                </div>\r\n                <AddMessageForm onSubmit={addMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst maxLength300 = maxLength(10);\r\n\r\nlet AddMessageForm = props => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={renderTextarea} validate={[maxLength300]} name=\"messageText\" placeholder='enter message'/>\r\n            <button>add message</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nAddMessageForm = reduxForm({form: 'addMessage'})(AddMessageForm);\r\n\r\nexport default Dialogs;","import {addMessageActionCreator} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n// function DialogsContainer(props) {\r\n//     let dialogsPage = props.store.getState().dialogsPage;\r\n//\r\n//     function addMessage() {\r\n//         props.store.dispatch(addMessageActionCreator());\r\n//     }\r\n//\r\n//     function  updateMessageText(text) {\r\n//         props.store.dispatch(updateMessageTextActionCreator(text));\r\n//     }\r\n//\r\n//     return (\r\n//         <Dialogs updateMessageText={updateMessageText}\r\n//                  addMessage={addMessage}\r\n//                  dialogsPage={dialogsPage} />\r\n//     );\r\n// }\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n   return {\r\n       addMessage: (messageText) => {\r\n           dispatch(addMessageActionCreator(messageText));\r\n       },\r\n   }\r\n}\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}